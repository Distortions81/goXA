.TH GOXA 1 "" "" "User Commands"
.SH NAME
goxa \- Go eXpress Archive
.SH SYNOPSIS
.B goxa
.RI "MODE[flags] [options]" " -arc FILE [paths...]"
.br
.B goxa c
.RI "[flags] -arc FILE [paths...]"
.br
.B goxa l
.RI "[flags] -arc FILE"
.br
.B goxa j
.RI "[flags] -arc FILE"
.br
.B goxa x
.RI "[flags] -arc FILE [destination]"
.SH DESCRIPTION
GoXA is a small archiver written in Go. It understands its own \fB.goxa\fP format and standard tar archives. Compression, checksums and most metadata are optional and controlled by flags. Archives can be streamed to stdout and, when the file name ends in \fB.b32\fP or \fB.b64\fP, encoded using Base32 or Base64. Files ending in \fB.goxaf\fP are encoded with forward error correction (FEC).
.SH DEFAULTS
Paths are stored relative to avoid accidental overwrites. Hidden files are
omitted unless \fBi\fP is specified. Blake3 checksums guard every file. Existing
files are never overwritten unless \fBf\fP is given. The program checks for zip
bombs and available space and prompts when extra archive flags are detected.
Progress output is on by default and the archive name must be provided with
\fB-arc\fP.
Data blocks default to 512KiB (set with \fB-block\fP) and each archive ends with a trailer listing block
offsets for fast seeking.
The \fB-threads\fP option controls how many goroutines are used for
compression and extraction.
.SH MODES
.TP
.B c
Create a new archive.
.TP
.B l
List archive contents.
.TP
.B j
Output a JSON listing of the archive. This also suppresses progress and other output.
.TP
.B x
Extract files from an archive.
.SH FLAGS
Single letter flags may be combined immediately after the mode letter (e.g. \fBcpm\fP). They control how metadata is stored and restored.
.TP
.B a
Store and restore absolute paths.
.TP
.B p
Preserve permissions.
.TP
.B m
Preserve modification times.
.TP
.B s
Disable file checksums.
.TP
.B b
Include per-block checksums.
.TP
.B n
Disable compression.
.TP
.B i
Include hidden files.
.TP
.B o
Archive special files (devices, fifos, symlinks etc.).
.TP
.B u
Use the flags that were stored in the archive itself.
.TP
.B v
Verbose output.
.TP
.B f
Force overwrite and ignore read errors.
.PP
Longer options use the usual \fB-flag=value\fP form.
.TP
.BI -arc " FILE"
Archive file name.
.TP
.B -stdout
Write archive data to standard output and suppress other output.
.TP
.BI -files " LIST"
Comma separated list of files/directories to extract.
.TP
.B -progress=false
Disable the progress display.
.TP
.BI -comp " ALG"
Compression algorithm: gzip, zstd, lz4, s2, snappy, brotli, xz or none.
.TP
.BI -speed " LEVEL"
Compression speed: fastest, default, better or best.
.TP
.BI -sum " ALG"
Checksum algorithm: crc32, crc16, xxhash, sha256 or blake3.
.TP
.BI -block " N"
Compression block size in bytes.
.TP
.BI -threads " N"
Number of threads to use.
.TP
.BI -format " TYPE"
Force archive format: goxa or tar.
.TP
.BI -retries " N"
Retries when a file changes during read (0 means never give up).
.TP
.BI -retrydelay " N"
Delay between retries in seconds.
.TP
.B -failonchange
Treat changed files as fatal errors.
.TP
.B -bombcheck=false
Disable zip bomb detection.
.TP
.B -spacecheck=false
Disable free space check.
.TP
.B -noflush
Skip final disk flush.
.TP
.B -version
Print program version and exit.
.TP
.B -pgo
Run built-in compression/decompression test using 10,000 files (\~2GB total) on an S-curve centered around 150KB and write \fBdefault.pgo\fP.
.TP
.BI -fec-data " NUM"
Number of FEC data shards (default 10).
.TP
.BI -fec-parity " NUM"
Number of FEC parity shards (default 3).
.TP
.BI -fec-level " LEVEL"
FEC redundancy preset: \fBlow\fP (10 data / 3 parity), \fBmedium\fP (8 data / 4 parity) or \fBhigh\fP (5 data / 5 parity). Use of \fB-fec-data\fP and \fB-fec-parity\fP overrides these presets.
.SS FEC ENCODING
FEC archives use Reed-Solomon coding to provide redundancy. Data shards contain the original bytes while parity shards allow recovery from missing or corrupted shards. For example, \fB-fec-data=10\fP and \fB-fec-parity=3\fP create 13 shards; any 10 shards are sufficient to reconstruct the archive. The \fB.goxaf\fP extension triggers automatic decoding during extraction or listing.
.SS BASE32 AND BASE64
When the archive name ends with \fB.b32\fP or \fB.b64\fP the output is Base32 or Base64 encoded. Extraction and listing automatically decode these files.
.SH EXTENSIONS
.TP
.B .b32/.b64
Base32 or Base64 encoded archive.
.TP
.B .goxaf
FEC encoded archive.
.TP
.B .tar, .tar.gz
Tar archive (gzipped if \fB.gz\fP).
.TP
.B .tar.xz
Tar archive compressed with xz.
.SH EXAMPLES
.nf
goxa -version
goxa -pgo             # generate default.pgo with 10k files (~2GB)
goxa c -arc=backup.goxa dir/
goxa x -arc=backup.goxa
goxa c -arc=backup.tar.gz dir/
goxa c -arc=backup.goxa.b64 dir/
goxa c -arc=backup.goxaf dir/
.fi
.SH SEE ALSO
tar(1), gzip(1)
.SH AUTHOR
<https://github.com/Distortions81>
